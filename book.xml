<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xml:id="book-docbook-rocks"
      version="5.0">
 <info>
   <title>DocBook rocks!</title>
 </info>

 <section xml:id="who-is-this-for">
   <title>Who this is for?</title>
   <para>
     You want to write a page or two of documentation for your
     favorite DocBook-using project, and didn't find or got spooked by
     the extremely thorough and intimidating <link
     xlink:href="https://tdg.docbook.org/">official documentation</link>.
   </para>

   <para>
     This is a quick dive in to about ten DocBook tags which will let
     you get going and documenting pretty much everything you need.
     At the end is some fancier stuff you probably won't need.
   </para>

   <para>
     You don't have to have ever used DocBook before, or plan to ever
     use it again. My goal is to give you just enough knowledge to
     contribute some docs to your favorite DockBook-using project.
   </para>
 </section>

 <chapter xml:id="block-elements">
   <title>Block Elements</title>

   <section xml:id="paragraphs">
     <title>Paragraphs and Line Breaks</title>

     <example>
       <programlisting><xi:include href="./paras.xml" parse="text" /></programlisting>
       <informalfigure><xi:include href="./paras.xml" /></informalfigure>
     </example>
   </section>

   <section xml:id="headers">
     <title>Headers</title>

     <para>
       DocBook automatically applies the right header for your
       content, based on its <emphasis>nesting</emphasis>.
     </para>

     <example>
       <programlisting><xi:include href="./headers.xml" parse="text" /></programlisting>
       <informalfigure><xi:include href="./headers.xml" /></informalfigure>
     </example>


     <para>
       Sometimes, you may want a subtitle. DocBook supports that!
     </para>

     <example>
       <programlisting><xi:include href="./subtitles.xml" parse="text" /></programlisting>
       <informalfigure><xi:include href="./subtitles.xml" /></informalfigure>
     </example>
   </section>

   <section xml:id="blockquotes">
     <title>Blockquotes</title>

     <para>Blockquotes are easy, and support a lot of the other
     elements, too:</para>

     <example>
       <programlisting><xi:include href="./blockquotes.xml" parse="text" /></programlisting>
       <informalfigure><xi:include href="./blockquotes.xml" /></informalfigure>
     </example>

     <note>
       <para>
         Where the author of the quote is displayed is up to the
         rendering of the documentation. It is common to put the
         attribution first, but not necessary. If I had put the
         attribution after the paragraph, it would have displayed the
         same way.
       </para>
     </note>
   </section>

   <section xml:id="lists">
     <title>Lists</title>

     <para>
       DocBook supports bulleted and numbered lists.
     </para>

     <example>
       <programlisting><xi:include href="./list-unordered.xml" parse="text" /></programlisting>
       <informalfigure><xi:include href="./list-unordered.xml" /></informalfigure>
     </example>

     <example>
       <programlisting><xi:include href="./list-ordered.xml" parse="text" /></programlisting>
       <informalfigure><xi:include href="./list-ordered.xml" /></informalfigure>
     </example>

     <para>or a list with multiple paragraphs:</para>

     <example>
       <programlisting><xi:include href="./lists-paras.xml" parse="text" /></programlisting>
       <informalfigure><xi:include href="./lists-paras.xml" /></informalfigure>
     </example>

     <para>or a list with a blockquote:</para>

     <example>
       <programlisting><xi:include href="./lists-quote.xml" parse="text" /></programlisting>
       <informalfigure><xi:include href="./lists-quote.xml" /></informalfigure>
     </example>

     <note><para>
       The <literal>&lt;listitem&gt;</literal> can't contain text
       directly inside of it. If you want to include text, use a
       <literal>&lt;para&gt;</literal>. You could also use a
       <literal>&lt;blockquote&gt;</literal> or
       <literal>&lt;programlisting&gt;</literal> or many other
       options.
     </para></note>

   </section>

   <section xml:id="code-blocks">
     <title>Code Blocks</title>

     <example xml:id="codeblocks-xml-with-bash">
       <programlisting language="xml"><xi:include href="./code-blocks.xml" parse="text" /></programlisting>
       <informalfigure><xi:include href="./code-blocks.xml" /></informalfigure>
     </example>

     <note>
       <para>
         If you'll have a lot of <literal>&lt;</literal>s,
         <literal>&gt;</literal>s, or <literal>&amp;</literal>s like
         you're embedding a bunch of XML or HTML, you'll probably want
         to use a <literal>CDATA</literal> section instead of <link
         linkend="special-characters">escaping them all</link>:
       </para>
       <example>
         <programlisting language="xml"><xi:include href="./code-blocks-cdata.xml" parse="text" /></programlisting>
         <informalfigure><xi:include href="./code-blocks-cdata.xml" /></informalfigure>
       </example>
     </note>
   </section>
 </chapter>

 <chapter xml:id="span-elements">
   <title>Span Elements</title>
   <section xml:id="links">
     <title>Links</title>

     <para>
       DocBook supports normal URL links:
     </para>

     <example>
       <programlisting><xi:include href="./link-http.xml" parse="text" /></programlisting>
       <informalfigure><xi:include href="./link-http.xml" /></informalfigure>
     </example>

     <para>
       and also has a special method for linking within the same
       document:
     </para>

     <example>
       <programlisting><xi:include href="./link-inter.xml" parse="text" /></programlisting>
       <informalfigure><xi:include href="./link-inter.xml" /></informalfigure>
     </example>

     <para>
       The name <literal>&lt;xref&gt;</literal> may be a bit weird of
       a name at first. Maybe remembering it like a
       <emphasis>crossreference</emphasis> will help.
     </para>
   </section>

   <section xml:id="emphasis">
     <title>Emphasis</title>
     <para>
       DocBook documents typically only italicize for emphasis, though
       this is depends on how you process your document.
     </para>

     <example>
       <programlisting><xi:include href="./emphasis.xml" parse="text" /></programlisting>
       <informalfigure><xi:include href="./emphasis.xml" /></informalfigure>
     </example>
   </section>

   <section xml:id="inline-code">
     <title>Code</title>

     <para>
       To write a bit of code inside a paragraph, wrap it in
       <literal>&lt;literal&gt;&lt;/literal&gt;</literal>:
     </para>

     <example>
       <programlisting><xi:include href="./code-inline.xml" parse="text" /></programlisting>
       <informalfigure><xi:include href="./code-inline.xml" /></informalfigure>
     </example>
   </section>
 </chapter>

 <chapter xml:id="miscellaneous">
   <title>Miscellaneous</title>
   <section xml:id="special-characters">
     <title>Escaping Special Characters</title>
     <para>
       DocBook requires the author to escape a few symbols, depending
       on where you are using them.
     </para>
     <table id="escaping-characters">
       <thead>
         <tr>
           <th>Symbol</th>
           <th>How to type it instead</th>
           <th>When</th>
         </tr>
       </thead>
       <tbody>
         <tr>
           <td><literal>&lt;</literal></td>
           <td><para><literal>&amp;lt;</literal></para><para>as in <emphasis>less than</emphasis></para></td>
           <td>Everywhere in your document.</td>
         </tr>
         <tr>
           <td><literal>&gt;</literal></td>
           <td><para><literal>&amp;gt;</literal></para><para>as in <emphasis>greater than</emphasis></para></td>
           <td>Everywhere in your document.</td>
         </tr>
         <tr>
           <td><literal>&amp;</literal></td>
           <td><para><literal>&amp;amp;</literal></para><para> as in <emphasis>ampersand</emphasis></para></td>
           <td>Everywhere in your document.</td>
         </tr>
         <tr>
           <td><literal>&quot;</literal></td>
           <td><para><literal>&amp;quot;</literal></para><para>as in <emphasis>quote</emphasis></para></td>
           <td>Only inside attributes using a double quote, like <literal>&lt;foo
           xlink:title=&quot;a &amp;quot;can do&amp;quot; attitude!&quot;&gt;</literal>.</td>
         </tr>
         <tr>
           <td><literal>&apos;</literal></td>
           <td><para><literal>&amp;apos;</literal></para><para>as in <emphasis>apostrophe</emphasis></para></td>
           <td>Only inside attributes using a single quote, like <literal>&lt;foo
           xlink:title=&apos;it isn&amp;apos;t impossible!&apos;&gt;</literal>.</td>
         </tr>
       </tbody>
     </table>
   </section>
 </chapter>

  <chapter xml:id="fancy-stuff">
   <title>Fancy Stuff</title>
   <section xml:id="prompt">
     <title>Prompts in Command Lines</title>
     <para>
       Copy and paste the following commands:
     </para>

     <xi:include href="./screen-prompt.xml" />

     <para>
       You'll notice you only copied the commands, and not the
       prompt's <literal>$ </literal>.
     </para>

     <note>
       <para>
         We've just learned about the <literal>&lt;screen&gt;</literal>
         tag. A <literal>&lt;screen&gt;</literal> tag is like a
         <literal>&lt;programlisting&gt;</literal> except it is
         intended to show the text in a terminal window.
       </para>
     </note>

     <para>
       With Markdown you might imagine having a special fenced
       codeblock, like

       <programlisting>
```shell-commands
git clone https://github.com/grahamc/docbook.rocks.git
cd docbook.rocks
```</programlisting>

       and having it automatically prefix the lines with an
       unselectable <literal>$ </literal>. This would be interesting,
       but undesirable because you wouldn't want

       <programlisting>
```shell-commands
git clone https://github.com/grahamc/docbook.rocks.git
Cloning into 'docbook.rocks'...
remote: Counting objects: 52, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 52 (delta 19), reused 48 (delta 15), pack-reused 0
Unpacking objects: 100% (52/52), done.
```</programlisting>

       to turn in to

              <programlisting>
```shell-commands
$ git clone https://github.com/grahamc/docbook.rocks.git
$ Cloning into 'docbook.rocks'...
$ remote: Counting objects: 52, done.
$ remote: Compressing objects: 100% (36/36), done.
$ remote: Total 52 (delta 19), reused 48 (delta 15), pack-reused 0
$ Unpacking objects: 100% (52/52), done.
```</programlisting>
     </para>

     <para>
       You might imagine having your parser detect the existing
       prompts and fix them:

       <programlisting>
```shell-commands
$ git clone https:/b/github.com/grahamc/docbook.rocks.git
Cloning into 'docbook.rocks'...
remote: Counting objects: 52, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 52 (delta 19), reused 48 (delta 15), pack-reused 0
Unpacking objects: 100% (52/52), done.
$ cd docbook.rocks
``` </programlisting>

       having it automatically change the <literal>$ </literal> to be
       unselectable.
     </para>

     <para>
       But what about if your prompt changes, like

       <programlisting>
$ su -i
# </programlisting>

       sure you could detect <literal>#</literal> too... but what
       about something fancier, like:
       <programlisting>
$ git clone https:/b/github.com/grahamc/docbook.rocks.git
Cloning into 'docbook.rocks'...
remote: Counting objects: 52, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 52 (delta 19), reused 48 (delta 15), pack-reused 0
Unpacking objects: 100% (52/52), done.
$ cd docbook.rocks
$ nix-shell
[nix-shell:~/docbook.rocks]$
</programlisting>

       Having your markdown processer handle each of these cases is
       quite complicated, and we haven't even addressed cases where
       the prompt may be inside of another program.
     </para>
     <para>
       With DocBook, there is an optional, built-in tag to explicitly
       mark the prompt:

       <programlisting><xi:include href="./screen-prompt.xml"
       parse="text" /></programlisting>
     </para>
   </section>

   <section xml:id="tables">
     <title>Tables</title>

     <para>
       If you've done any HTML, you'll have no trouble with DocBook
       tables.
     </para>

     <programlisting><xi:include href="./tables.xml" parse="text" /></programlisting>
     <informalfigure><xi:include href="./tables.xml" /></informalfigure>
   </section>
  </chapter>

  <colophon>
    <para>
      Built with <link xlink:href="https://nixos.org/nix">Nix</link>,
      DocBook, and HighlighterJS. The text is authored by
      <author><firstname>Graham</firstname> <surname>Christensen</surname></author>.
      The source can be found at <link xlink:href="https://github.com/grahamc/docbook.rocks"
      />. This document is licensed CC-BY-SA-4.0.
    </para>
  </colophon>
</book>
